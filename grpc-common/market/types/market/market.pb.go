// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: market.proto

package market

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Symbol     string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Unit       string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	From       int64  `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	To         int64  `protobuf:"varint,5,opt,name=to,proto3" json:"to,omitempty"`
	Resolution string `protobuf:"bytes,6,opt,name=resolution,proto3" json:"resolution,omitempty"`
}

func (x *MarketReq) Reset() {
	*x = MarketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketReq) ProtoMessage() {}

func (x *MarketReq) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketReq.ProtoReflect.Descriptor instead.
func (*MarketReq) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{0}
}

func (x *MarketReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *MarketReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *MarketReq) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *MarketReq) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *MarketReq) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

type SymbolThumbRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CoinThumb `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SymbolThumbRes) Reset() {
	*x = SymbolThumbRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolThumbRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolThumbRes) ProtoMessage() {}

func (x *SymbolThumbRes) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolThumbRes.ProtoReflect.Descriptor instead.
func (*SymbolThumbRes) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{1}
}

func (x *SymbolThumbRes) GetList() []*CoinThumb {
	if x != nil {
		return x.List
	}
	return nil
}

type CoinThumb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol       string    `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Open         float64   `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	High         float64   `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`
	Low          float64   `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`
	Close        float64   `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	Chg          float64   `protobuf:"fixed64,6,opt,name=chg,proto3" json:"chg,omitempty"`
	Change       float64   `protobuf:"fixed64,7,opt,name=change,proto3" json:"change,omitempty"`
	Volume       float64   `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`
	Turnover     float64   `protobuf:"fixed64,9,opt,name=turnover,proto3" json:"turnover,omitempty"`
	LastDayClose float64   `protobuf:"fixed64,10,opt,name=lastDayClose,proto3" json:"lastDayClose,omitempty"`
	UsdRate      float64   `protobuf:"fixed64,11,opt,name=usdRate,proto3" json:"usdRate,omitempty"`
	BaseUsdRate  float64   `protobuf:"fixed64,12,opt,name=baseUsdRate,proto3" json:"baseUsdRate,omitempty"`
	Zone         float64   `protobuf:"fixed64,13,opt,name=zone,proto3" json:"zone,omitempty"`
	DateTime     int64     `protobuf:"varint,14,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	Trend        []float64 `protobuf:"fixed64,15,rep,packed,name=trend,proto3" json:"trend,omitempty"`
}

func (x *CoinThumb) Reset() {
	*x = CoinThumb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinThumb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinThumb) ProtoMessage() {}

func (x *CoinThumb) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinThumb.ProtoReflect.Descriptor instead.
func (*CoinThumb) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{2}
}

func (x *CoinThumb) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CoinThumb) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *CoinThumb) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *CoinThumb) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *CoinThumb) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *CoinThumb) GetChg() float64 {
	if x != nil {
		return x.Chg
	}
	return 0
}

func (x *CoinThumb) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *CoinThumb) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CoinThumb) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *CoinThumb) GetLastDayClose() float64 {
	if x != nil {
		return x.LastDayClose
	}
	return 0
}

func (x *CoinThumb) GetUsdRate() float64 {
	if x != nil {
		return x.UsdRate
	}
	return 0
}

func (x *CoinThumb) GetBaseUsdRate() float64 {
	if x != nil {
		return x.BaseUsdRate
	}
	return 0
}

func (x *CoinThumb) GetZone() float64 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *CoinThumb) GetDateTime() int64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *CoinThumb) GetTrend() []float64 {
	if x != nil {
		return x.Trend
	}
	return nil
}

type ExchangeCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol           string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	BaseCoinScale    int64   `protobuf:"varint,3,opt,name=baseCoinScale,proto3" json:"baseCoinScale,omitempty"`
	BaseSymbol       string  `protobuf:"bytes,4,opt,name=baseSymbol,proto3" json:"baseSymbol,omitempty"`
	CoinScale        int64   `protobuf:"varint,5,opt,name=coinScale,proto3" json:"coinScale,omitempty"`
	Enable           int64   `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`
	Fee              float64 `protobuf:"fixed64,7,opt,name=fee,proto3" json:"fee,omitempty"`
	Sort             int64   `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`
	EnableMarketBuy  int64   `protobuf:"varint,9,opt,name=EnableMarketBuy,proto3" json:"EnableMarketBuy,omitempty"`
	EnableMarketSell int64   `protobuf:"varint,10,opt,name=EnableMarketSell,proto3" json:"EnableMarketSell,omitempty"`
	MinSellPrice     float64 `protobuf:"fixed64,11,opt,name=MinSellPrice,proto3" json:"MinSellPrice,omitempty"`
	Flag             int64   `protobuf:"varint,12,opt,name=Flag,proto3" json:"Flag,omitempty"`
	MaxTradingOrder  int64   `protobuf:"varint,13,opt,name=MaxTradingOrder,proto3" json:"MaxTradingOrder,omitempty"`
	MaxTradingTime   int64   `protobuf:"varint,14,opt,name=MaxTradingTime,proto3" json:"MaxTradingTime,omitempty"`
	MinTurnover      int64   `protobuf:"varint,15,opt,name=MinTurnover,proto3" json:"MinTurnover,omitempty"`
	ClearTime        int64   `protobuf:"varint,16,opt,name=ClearTime,proto3" json:"ClearTime,omitempty"`
	EndTime          int64   `protobuf:"varint,17,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Exchangeable     int64   `protobuf:"varint,18,opt,name=Exchangeable,proto3" json:"Exchangeable,omitempty"`
	MaxBuyPrice      float64 `protobuf:"fixed64,19,opt,name=MaxBuyPrice,proto3" json:"MaxBuyPrice,omitempty"`
	MaxVolume        float64 `protobuf:"fixed64,20,opt,name=MaxVolume,proto3" json:"MaxVolume,omitempty"`
	MinVolume        float64 `protobuf:"fixed64,21,opt,name=MinVolume,proto3" json:"MinVolume,omitempty"`
	PublishAmount    float64 `protobuf:"fixed64,22,opt,name=PublishAmount,proto3" json:"PublishAmount,omitempty"`
	PublishPrice     float64 `protobuf:"fixed64,23,opt,name=PublishPrice,proto3" json:"PublishPrice,omitempty"`
	PublishType      int64   `protobuf:"varint,24,opt,name=PublishType,proto3" json:"PublishType,omitempty"`
	RobotType        int64   `protobuf:"varint,25,opt,name=RobotType,proto3" json:"RobotType,omitempty"`
	StartTime        int64   `protobuf:"varint,26,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	Visible          int64   `protobuf:"varint,27,opt,name=Visible,proto3" json:"Visible,omitempty"`
	Zone             int64   `protobuf:"varint,28,opt,name=Zone,proto3" json:"Zone,omitempty"`
	CoinSymbol       string  `protobuf:"bytes,29,opt,name=coinSymbol,proto3" json:"coinSymbol,omitempty"`
}

func (x *ExchangeCoin) Reset() {
	*x = ExchangeCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCoin) ProtoMessage() {}

func (x *ExchangeCoin) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCoin.ProtoReflect.Descriptor instead.
func (*ExchangeCoin) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{3}
}

func (x *ExchangeCoin) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeCoin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ExchangeCoin) GetBaseCoinScale() int64 {
	if x != nil {
		return x.BaseCoinScale
	}
	return 0
}

func (x *ExchangeCoin) GetBaseSymbol() string {
	if x != nil {
		return x.BaseSymbol
	}
	return ""
}

func (x *ExchangeCoin) GetCoinScale() int64 {
	if x != nil {
		return x.CoinScale
	}
	return 0
}

func (x *ExchangeCoin) GetEnable() int64 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *ExchangeCoin) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *ExchangeCoin) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ExchangeCoin) GetEnableMarketBuy() int64 {
	if x != nil {
		return x.EnableMarketBuy
	}
	return 0
}

func (x *ExchangeCoin) GetEnableMarketSell() int64 {
	if x != nil {
		return x.EnableMarketSell
	}
	return 0
}

func (x *ExchangeCoin) GetMinSellPrice() float64 {
	if x != nil {
		return x.MinSellPrice
	}
	return 0
}

func (x *ExchangeCoin) GetFlag() int64 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *ExchangeCoin) GetMaxTradingOrder() int64 {
	if x != nil {
		return x.MaxTradingOrder
	}
	return 0
}

func (x *ExchangeCoin) GetMaxTradingTime() int64 {
	if x != nil {
		return x.MaxTradingTime
	}
	return 0
}

func (x *ExchangeCoin) GetMinTurnover() int64 {
	if x != nil {
		return x.MinTurnover
	}
	return 0
}

func (x *ExchangeCoin) GetClearTime() int64 {
	if x != nil {
		return x.ClearTime
	}
	return 0
}

func (x *ExchangeCoin) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ExchangeCoin) GetExchangeable() int64 {
	if x != nil {
		return x.Exchangeable
	}
	return 0
}

func (x *ExchangeCoin) GetMaxBuyPrice() float64 {
	if x != nil {
		return x.MaxBuyPrice
	}
	return 0
}

func (x *ExchangeCoin) GetMaxVolume() float64 {
	if x != nil {
		return x.MaxVolume
	}
	return 0
}

func (x *ExchangeCoin) GetMinVolume() float64 {
	if x != nil {
		return x.MinVolume
	}
	return 0
}

func (x *ExchangeCoin) GetPublishAmount() float64 {
	if x != nil {
		return x.PublishAmount
	}
	return 0
}

func (x *ExchangeCoin) GetPublishPrice() float64 {
	if x != nil {
		return x.PublishPrice
	}
	return 0
}

func (x *ExchangeCoin) GetPublishType() int64 {
	if x != nil {
		return x.PublishType
	}
	return 0
}

func (x *ExchangeCoin) GetRobotType() int64 {
	if x != nil {
		return x.RobotType
	}
	return 0
}

func (x *ExchangeCoin) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ExchangeCoin) GetVisible() int64 {
	if x != nil {
		return x.Visible
	}
	return 0
}

func (x *ExchangeCoin) GetZone() int64 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *ExchangeCoin) GetCoinSymbol() string {
	if x != nil {
		return x.CoinSymbol
	}
	return ""
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CanAutoWithdraw   int32   `protobuf:"varint,3,opt,name=canAutoWithdraw,proto3" json:"canAutoWithdraw,omitempty"`
	CanRecharge       int32   `protobuf:"varint,4,opt,name=canRecharge,proto3" json:"canRecharge,omitempty"`
	CanTransfer       int32   `protobuf:"varint,5,opt,name=canTransfer,proto3" json:"canTransfer,omitempty"`
	CanWithdraw       int32   `protobuf:"varint,6,opt,name=canWithdraw,proto3" json:"canWithdraw,omitempty"`
	CnyRate           float64 `protobuf:"fixed64,7,opt,name=cnyRate,proto3" json:"cnyRate,omitempty"`
	EnableRpc         int32   `protobuf:"varint,8,opt,name=enableRpc,proto3" json:"enableRpc,omitempty"`
	IsPlatformCoin    int32   `protobuf:"varint,9,opt,name=isPlatformCoin,proto3" json:"isPlatformCoin,omitempty"`
	MaxTxFee          float64 `protobuf:"fixed64,10,opt,name=maxTxFee,proto3" json:"maxTxFee,omitempty"`
	MaxWithdrawAmount float64 `protobuf:"fixed64,11,opt,name=maxWithdrawAmount,proto3" json:"maxWithdrawAmount,omitempty"`
	MinTxFee          float64 `protobuf:"fixed64,12,opt,name=minTxFee,proto3" json:"minTxFee,omitempty"`
	MinWithdrawAmount float64 `protobuf:"fixed64,13,opt,name=minWithdrawAmount,proto3" json:"minWithdrawAmount,omitempty"`
	NameCn            string  `protobuf:"bytes,14,opt,name=nameCn,proto3" json:"nameCn,omitempty"`
	Sort              int32   `protobuf:"varint,15,opt,name=sort,proto3" json:"sort,omitempty"`
	Status            int32   `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	Unit              string  `protobuf:"bytes,17,opt,name=unit,proto3" json:"unit,omitempty"`
	UsdRate           float64 `protobuf:"fixed64,18,opt,name=usdRate,proto3" json:"usdRate,omitempty"`
	WithdrawThreshold float64 `protobuf:"fixed64,19,opt,name=withdrawThreshold,proto3" json:"withdrawThreshold,omitempty"`
	HasLegal          int32   `protobuf:"varint,20,opt,name=hasLegal,proto3" json:"hasLegal,omitempty"`
	ColdWalletAddress string  `protobuf:"bytes,21,opt,name=coldWalletAddress,proto3" json:"coldWalletAddress,omitempty"`
	MinerFee          float64 `protobuf:"fixed64,22,opt,name=minerFee,proto3" json:"minerFee,omitempty"`
	WithdrawScale     int32   `protobuf:"varint,23,opt,name=withdrawScale,proto3" json:"withdrawScale,omitempty"`
	AccountType       int32   `protobuf:"varint,24,opt,name=accountType,proto3" json:"accountType,omitempty"`
	DepositAddress    string  `protobuf:"bytes,25,opt,name=depositAddress,proto3" json:"depositAddress,omitempty"`
	Infolink          string  `protobuf:"bytes,26,opt,name=infolink,proto3" json:"infolink,omitempty"`
	Information       string  `protobuf:"bytes,27,opt,name=information,proto3" json:"information,omitempty"`
	MinRechargeAmount float64 `protobuf:"fixed64,28,opt,name=minRechargeAmount,proto3" json:"minRechargeAmount,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{4}
}

func (x *Coin) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coin) GetCanAutoWithdraw() int32 {
	if x != nil {
		return x.CanAutoWithdraw
	}
	return 0
}

func (x *Coin) GetCanRecharge() int32 {
	if x != nil {
		return x.CanRecharge
	}
	return 0
}

func (x *Coin) GetCanTransfer() int32 {
	if x != nil {
		return x.CanTransfer
	}
	return 0
}

func (x *Coin) GetCanWithdraw() int32 {
	if x != nil {
		return x.CanWithdraw
	}
	return 0
}

func (x *Coin) GetCnyRate() float64 {
	if x != nil {
		return x.CnyRate
	}
	return 0
}

func (x *Coin) GetEnableRpc() int32 {
	if x != nil {
		return x.EnableRpc
	}
	return 0
}

func (x *Coin) GetIsPlatformCoin() int32 {
	if x != nil {
		return x.IsPlatformCoin
	}
	return 0
}

func (x *Coin) GetMaxTxFee() float64 {
	if x != nil {
		return x.MaxTxFee
	}
	return 0
}

func (x *Coin) GetMaxWithdrawAmount() float64 {
	if x != nil {
		return x.MaxWithdrawAmount
	}
	return 0
}

func (x *Coin) GetMinTxFee() float64 {
	if x != nil {
		return x.MinTxFee
	}
	return 0
}

func (x *Coin) GetMinWithdrawAmount() float64 {
	if x != nil {
		return x.MinWithdrawAmount
	}
	return 0
}

func (x *Coin) GetNameCn() string {
	if x != nil {
		return x.NameCn
	}
	return ""
}

func (x *Coin) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Coin) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Coin) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Coin) GetUsdRate() float64 {
	if x != nil {
		return x.UsdRate
	}
	return 0
}

func (x *Coin) GetWithdrawThreshold() float64 {
	if x != nil {
		return x.WithdrawThreshold
	}
	return 0
}

func (x *Coin) GetHasLegal() int32 {
	if x != nil {
		return x.HasLegal
	}
	return 0
}

func (x *Coin) GetColdWalletAddress() string {
	if x != nil {
		return x.ColdWalletAddress
	}
	return ""
}

func (x *Coin) GetMinerFee() float64 {
	if x != nil {
		return x.MinerFee
	}
	return 0
}

func (x *Coin) GetWithdrawScale() int32 {
	if x != nil {
		return x.WithdrawScale
	}
	return 0
}

func (x *Coin) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *Coin) GetDepositAddress() string {
	if x != nil {
		return x.DepositAddress
	}
	return ""
}

func (x *Coin) GetInfolink() string {
	if x != nil {
		return x.Infolink
	}
	return ""
}

func (x *Coin) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *Coin) GetMinRechargeAmount() float64 {
	if x != nil {
		return x.MinRechargeAmount
	}
	return 0
}

type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Open   float64 `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	Close  float64 `protobuf:"fixed64,3,opt,name=close,proto3" json:"close,omitempty"`
	High   float64 `protobuf:"fixed64,4,opt,name=high,proto3" json:"high,omitempty"`
	Low    float64 `protobuf:"fixed64,5,opt,name=low,proto3" json:"low,omitempty"`
	Volume float64 `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{5}
}

func (x *History) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *History) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *History) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *History) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *History) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *History) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type HistoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*History `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HistoryRes) Reset() {
	*x = HistoryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRes) ProtoMessage() {}

func (x *HistoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRes.ProtoReflect.Descriptor instead.
func (*HistoryRes) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{6}
}

func (x *HistoryRes) GetList() []*History {
	if x != nil {
		return x.List
	}
	return nil
}

type ExchangeCoinRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ExchangeCoin `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ExchangeCoinRes) Reset() {
	*x = ExchangeCoinRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCoinRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCoinRes) ProtoMessage() {}

func (x *ExchangeCoinRes) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCoinRes.ProtoReflect.Descriptor instead.
func (*ExchangeCoinRes) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{7}
}

func (x *ExchangeCoinRes) GetList() []*ExchangeCoin {
	if x != nil {
		return x.List
	}
	return nil
}

var File_market_proto protoreflect.FileDescriptor

var file_market_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x0e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x52, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf7, 0x02,
	0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x68, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x63, 0x68, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x75, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x22, 0x8a, 0x07, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x42, 0x75, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x12, 0x2a, 0x0a, 0x10,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x53,
	0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x4d, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61,
	0x78, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x54, 0x75, 0x72, 0x6e,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x90, 0x07, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x41,
	0x75, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6e, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x63, 0x6e, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x46, 0x65, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x54, 0x78, 0x46, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x75, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f,
	0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0x31, 0x0a, 0x0a, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x32,
	0xb5, 0x02, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x14, 0x46, 0x69,
	0x6e, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x0e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_proto_rawDescOnce sync.Once
	file_market_proto_rawDescData = file_market_proto_rawDesc
)

func file_market_proto_rawDescGZIP() []byte {
	file_market_proto_rawDescOnce.Do(func() {
		file_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_proto_rawDescData)
	})
	return file_market_proto_rawDescData
}

var file_market_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_market_proto_goTypes = []interface{}{
	(*MarketReq)(nil),       // 0: market.MarketReq
	(*SymbolThumbRes)(nil),  // 1: market.SymbolThumbRes
	(*CoinThumb)(nil),       // 2: market.CoinThumb
	(*ExchangeCoin)(nil),    // 3: market.ExchangeCoin
	(*Coin)(nil),            // 4: market.Coin
	(*History)(nil),         // 5: market.History
	(*HistoryRes)(nil),      // 6: market.HistoryRes
	(*ExchangeCoinRes)(nil), // 7: market.ExchangeCoinRes
}
var file_market_proto_depIdxs = []int32{
	2, // 0: market.SymbolThumbRes.list:type_name -> market.CoinThumb
	5, // 1: market.HistoryRes.list:type_name -> market.History
	3, // 2: market.ExchangeCoinRes.list:type_name -> market.ExchangeCoin
	0, // 3: market.Market.FindSymbolThumbTrend:input_type -> market.MarketReq
	0, // 4: market.Market.FindSymbolInfo:input_type -> market.MarketReq
	0, // 5: market.Market.FindCoinInfo:input_type -> market.MarketReq
	0, // 6: market.Market.HistoryKline:input_type -> market.MarketReq
	0, // 7: market.Market.FindExchangeCoinVisible:input_type -> market.MarketReq
	1, // 8: market.Market.FindSymbolThumbTrend:output_type -> market.SymbolThumbRes
	3, // 9: market.Market.FindSymbolInfo:output_type -> market.ExchangeCoin
	4, // 10: market.Market.FindCoinInfo:output_type -> market.Coin
	6, // 11: market.Market.HistoryKline:output_type -> market.HistoryRes
	7, // 12: market.Market.FindExchangeCoinVisible:output_type -> market.ExchangeCoinRes
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_market_proto_init() }
func file_market_proto_init() {
	if File_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolThumbRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinThumb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCoinRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_market_proto_goTypes,
		DependencyIndexes: file_market_proto_depIdxs,
		MessageInfos:      file_market_proto_msgTypes,
	}.Build()
	File_market_proto = out.File
	file_market_proto_rawDesc = nil
	file_market_proto_goTypes = nil
	file_market_proto_depIdxs = nil
}
